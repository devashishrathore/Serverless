service: serverlessproject

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x

plugins:
  - serverless-aws-documentation

functions:
  getUsers:
    handler: lambdas/getUsers.getAllUsers
    events:
      - http:
    path: api/users
    method: GET
    cors: true
    consumes:
      - "application/json"
    produces:
      - "application/json"
    documentation:
      summary: Retrieve a list of users
      description: |
        This API returns a list of users. You can use the `limit` and `offset` query parameters to control the number of results returned and the starting position in the list.
      parameters:
        - name: "limit"
          in: "query"
          description: "The maximum number of results to return"
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            description: The maximum number of results to return
        - name: "offset"
          in: "query"
          description: "The starting position in the list of results"
          required: false
          schema:
          type: integer
          minimum: 0
          default: 0
      responses:
      "200":
        description: A list of users
        schema:
          type: array
          items:
            $ref: "#/definitions/User"
      "400":
        description: Bad request
        schema:
          $ref: "#/definitions/Error"
      "404":
        description: Not Found
        schema:
          $ref: "#/definitions/Error"
      "500":
        description: Internal Sever Error
        schema:
          $ref: "#/definitions/Error"
    definitions:
      User:
        type: object
        properties:
          name:
            type: string
          age:
            type: number
          city:
            type: string
        required:
          - name
          - age
          - city
      Error:
        type: object
        properties:
          message:
            type: string
        required:
          - message

  updateUsers:
    handler: lambdas/updateUser.updateUserInfo
    events:
      - http:
    path: api/users
    method: PUT
    cors: true
    consumes:
      - "application/json"
    produces:
      - "application/json"
    documentation:
    summary: update or create new users from list of users
    description: "This API update users ,if there is no user in collection that case new user created."
    parameters:
      - name: "users"
        in: "body"
        description: "The users list array"
        required: true
        schema:
          type: array
          items:
            type: "object"
            properties:
              name:
                type: "string"
              city:
                type: "string"
              age:
                type: "integer"
    responses:
      "200":
        description: success message
        schema:
          $ref: "#/definitions/Response"
      "500":
        description: Internal Sever Error
        schema:
          $ref: "#/definitions/Response"
    definitions:
      Response:
        type: object
        properties:
          message:
            type: string
        required:
          - message

  updateUsersAge:
    handler: lambdas/updateUser.updateAge
    events:
      - http:
    path: api/users/{age}
    method: PUT
    cors: true
    consumes:
      - "application/json"
    produces:
      - "application/json"
    documentation:
      summary: update or create new users from list of users
      description: |
        This API update users age by given age in path parameter.
      parameters:
        - name: "age"
          in: "path"
          description: "age of user"
          required: true
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            description: The maximum number of results to return
      responses:
        "200":
          description: success message
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: Internal Sever Error
          schema:
            $ref: "#/definitions/Response"
    definitions:
      Response:
        type: object
        properties:
          message:
            type: string
          required:
            - message
